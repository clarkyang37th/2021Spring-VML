# -*- coding: utf-8 -*-
"""VML Hw01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IZGihnBBtrr2SISk5bTVasv-KSPu51Ld

CSCI-GA.3033-​076 Vision Meets Machine Learning\
In this assignment, you will be introduced to few Python libraries that will be needed for this course. This assumes that you can write basic Python programs. If you do not know how to code in Python, this would be a good time for you to learn.

The main goals of this assignment are to introduce how you could:
1. Do basic vector operations.
2. Use Matplotlib to plot a function, and to also display a collection of images. 
3. Summarize a neural network architecture.

You may have already worked with these libraries before, in which case we hope this could be a nice review.
Also accompanying each section below, there are a few questions (4 questions in total). Please give your answers in the space provided.

**Submission Info**

You should make a copy of this Colab (File->Save a copy in Drive). Please start the assignment early and don’t be afraid to ask for help from either the TAs or myself. You are allowed to collaborate with other students in terms discussing ideas and possible solutions. However you code up the solution yourself, i.e. you must write your own code. Copying your friends code and just changing all the names of the variables is not allowed! You are not allowed to use solutions from similar assignments in courses from other institutions, or those found elsewhere on the web. Your solutions should be submitted via the NYU classes system.

### **Part1: Numpy**

NumPy (https://numpy.org/) is a highly popular Python library within the scientific community. With NumPy, you can operate on n- dimensional arrays and perform a number of mathematical operations on them. For example, you can generate an array of random numbers (https://numpy.org/doc/stable/reference/random/index.html), compute element-wise sum/difference between 2 arrays (https://numpy.org/doc/stable/reference/ufuncs.html#available-ufuncs), find the L2 norm of an array (https://numpy.org/doc/stable/reference/generated/numpy.linalg.norm.html), etc.

NumPy is mostly C under the hood, and it's highly optimized. So it's highly recommended that you use NumPy whenever possible. We will show some basic operations here. This is by no means complete - NumPy is a huge library and it's impossible to cover everything.

First, let's import numpy:
"""

import numpy as np

"""You can convert a 2d list of numbers into a numpy array using:"""

nums = [[1, 2, 3, 4], [5, 6, 7, 8]] 
np.array(nums)

"""linspace(start, end, n) can be used to generate an array of n evenly spaced numbers from start to end (both inclusive)."""

np.linspace(0,10,21)

"""You can multiply this array with a scalar:"""

2*np.linspace(0, 10, 21)

""" 1d array can also be reshaped into a 2d array. To see the dimensions of a numpy array arr , use arr.shape ."""

arr = np.linspace(0, 99, 100)
new_arr = arr.reshape((10, 10)) 
print("Original shape", arr.shape) 
print("Reshaped array shape", new_arr.shape) 
print("Reshaped array:\n", new_arr)

x = np.linspace(-10, 10, 101) # get 101 data points 
sigma = 1/(1+ np.exp(-x))

"""You can learn more about NumPy from the quickstart page (https://numpy.org/doc/stable/user/quickstart.html).

**Question 1** ( 5 points)

Find the dot product of these 2 arrays using NumPy:

$$
A = \begin{pmatrix}
19 & 7 & -15\\
12 & 59 & 27\\
\end{pmatrix}
$$

$$
B = \begin{pmatrix}
3 \\
-7 \\
13
\end{pmatrix}
$$
"""

A = [[19, 7, -15], [12, 59, 27]] 
B = [[3], [-7], [13]]
dotprodab = np.dot(A, B)
print(dotprodab)

"""Question 2 (5 Points)

Create 2 matrices:
$$
C = \begin{pmatrix}
1 & 2 & 3\\
7 & 8 & 9\\
\end{pmatrix}
$$

$$
D = \begin{pmatrix}
21 & 22 & 23\\
31 & 32 & 33\\
\end{pmatrix}
$$

and concatenate them to get this matrix: 
\begin{pmatrix}
1 & 2 & 3\\
7 & 8 & 9\\
21 & 22 & 23\\
31 & 32 & 33\\
\end{pmatrix}

"""

C = [[1, 2, 3], [7, 8, 9]]
D = [[21, 22, 23], [31, 32, 33]]
concatecd = np.concatenate((C, D), axis=0)
print("Concatenate array:\n", concatecd)

"""**Part 2: Plotting in Python**

Matplotlib is the most commonly used plotting Python library. There are other libraries out there (such as seaborn, bokeh, etc.), but we will focus on Matplotlib.
Our first step would be to plot the sigmoid activation function.
"""

x = np.linspace(-10, 10, 101) # get 101 data points 
sigma = 1/(1+ np.exp(-x)) # get f(x)

print(x.shape, sigma.shape)

import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.plot(x, sigma, 'g-') # plot x, f(x)
ax.set_xlabel('x')
ax.set_ylabel('$\sigma(x)$')
ax.set_title('Sigmoid activation function $\sigma(x)$ vs $x$')
plt.show()

"""Question 3 (10 Points)

On the same graph:
1. Plot the tanh activation function (using a blue line).
2. Draw a vertical dotted line at  x=0.
3. Add a legend indicating what the different lines are.

Here's an excellent article (although slightly advanced) that gives a quick intro to Matplotlib: https://pbpython.com/effective- matplotlib.html (https://pbpython.com/effective-matplotlib.html). Some sections use Pandas, which is another Python library used by the data science community. You don't need to understand how it works, but just know that in Pandas, you can visualize data by calling a plot method on the data object (known as a dataframe in Pandas vernacular). This effectively calls matplotlib in the background.
Matplotlib documentation: https://matplotlib.org/3.3.3/contents.html (https://matplotlib.org/3.3.3/contents.html).
"""

x = np.linspace(-10, 10, 101) # get 101 data points 
tanh = (1-np.exp(-2*x))/(1+np.exp(-2*x)) 
print(x.shape, tanh.shape)
fig, ax = plt.subplots()
ax.plot(x, tanh, color="blue", label = 'tanh')
ax.set_xlabel('x')
ax.set_ylabel('$\tanh(x)$')
ax.set_title('tangent activation function $\ tanh(x)$ vs $x$')
plt.axvline(x=0, color='k', linestyle='--', label = 'x = 0')
plt.legend()
plt.show()

"""Now let's try to display a group of images using Matplotlib. We have provided some sample images from Imagenet dataset in the img folder. This dataset is mainly used to train neural nets for object recognition task. For this, we will need a library called PIL (Python Imaging Library)."""

! pip install gdown 
! gdown --id 1zNDTQksXgsPrGnTWEZjU1pvU4yWN1__l 
! unzip data_hw1.zip

from PIL import Image # Reference: https://pillow.readthedocs.io/en/3.0.x/reference/Image.h tml
import glob # Reference: https://docs.python.org/3/library/glob.html
img_paths = glob.glob('data_hw1/**.jpg')
n_images = len(img_paths)

img_paths

fig, ax = plt.subplots(n_images//2, 2, figsize=(10, 10)) 
fig.tight_layout()
for i in range(n_images):
  img_path = img_paths[i]
  img_data = Image.open(img_path)
  row, col = i//2, i%2
  ax[row][col].imshow(img_data) 
  ax[row][col].axis('off')

"""# **Part 3: ResNet**

In this course, we will use PyTorch to build and train neural networks. Although PyTorch will be introduced in a later assignment, we want to show here how you can see important model details.

PyTorch folks also maintain a separate module called torchvision (https://pytorch.org/vision/stable/index.html), which contains popular datasets, pretrained models relevant to computer vision. We will use ResNet-18 model from this module to demonstrate this. You don't need to know any details about ResNet, this is just for demonstration purposes. Here's a link to the paper in case you're interested: https://arxiv.org/pdf/1512.03385.pdf (https://arxiv.org/pdf/1512.03385.pdf)
There is a library called torchsummary (https://github.com/sksq96/pytorch-summary) that can be used to print model summary (this was created by an NYU student!). With this, we can see all the layers inside the model, the type of each layer, etc. In addition, it also prints overall statistics such as model size, number of parameters in the model, etc.
"""

from torchvision import models 
from torchsummary import summary
resnet18 = models.resnet18().cpu() 
print(summary(resnet18, (3, 7, 7)))

"""**Question 4** (10 points)

There are other ResNet architectures - ResNet-34, ResNet-50, ResNet-101 and ResNet-152. These models mainly differ in the number of layers. They are available in the torchvision module. Using the example code above, find the model size and number of parameters for each of the first three models. Provide your answers in a tabular format.
"""

resnet34 = models.resnet34().cpu()
print(summary(resnet34, (3, 7, 7)))

resnet50 = models.resnet50().cpu()
print(summary(resnet50, (3, 7, 7)))

resnet101 = models.resnet101().cpu()
print(summary(resnet101, (3, 7, 7)))

from tabulate import tabulate
print(tabulate([['Resnet-34', 83.44, 21797672], ['Resnet-50', 98.35, 25557032], ['Resnet-101', 171.53, 44549160]], headers=['Model name', 'Totoal parameters(MB)', 'Total Size(MB)']))

